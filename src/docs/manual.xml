<?xml version="1.0" encoding="UTF-8"?>
<book version="5.0" xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml"
      xmlns:db="http://docbook.org/ns/docbook">
  <title>JavaCC 21 Parser Generator</title>

  <subtitle>Status: very early draft, all feedback welcome</subtitle>

  <preface xml:id="preface">
    <title>Preamble</title>

    <simplesect>
      <title>What is JavaCC?</title>

      <para>Well, as it says on the box, JavaCC is a <emphasis>parser
      generator</emphasis>. And unless it is horribly misnamed, this is
      something you can use to generate a parser. A correct answer, to be
      sure, but not terribly informative. (Or, to put it another way, if that
      is a sufficient answer for you, it means that you already knew the
      answer to the question.) If you tell someone that a bazbat demunger is
      something you use to demunge a bazbat, that can only elicit further
      questions, such as: "WTF is a bazbat?" and: "Why, pray tell, would I
      want to demunge one?" So, first things first: it seems that we should
      make clear what a parser is. Now, maybe most readers already know that,
      but many will not be so clear on why they should want to use a tool like
      JavaCC to <emphasis>generate</emphasis> a parser, rather than just
      directly coding it in Java, for example. So, in this preamble, I'll try
      my best to answer these questions. Then, if you're still with me, we'll
      jump into some working code.</para>

      <para>A parser is a program (perhaps it would be more precise to say a
      "programmatic component", but we are not striving for extreme precision
      here) that <emphasis>parses</emphasis>: that means that it reads in text
      that is in a well defined <emphasis>language</emphasis> (a computer
      language of course, like C or Java, not a human language like English or
      Japanese) and breaks it down into its various subcomponents. Parsing is
      a central topic in computer science; parsers are a core component in
      countless sorts of systems. Though one may think first of the compilers
      and interpreters for the various programming languages, it is hardly
      limited to that. The web browser in which you are likely reading this is
      built on top of a parser that can read in and analyze HTML (as well as
      all the languages like CSS and javascript that are embedded in it.) This
      is necessarily the very first step that a browser has to do in order to
      display a page.</para>

      <para>Given this, it is hardly suprising that
      <emphasis>parsing</emphasis>, i.e. the lexical and syntactic analysis of
      structured text, has been the subject of a large amount of academic
      research literature. I suspect that this is not only because of how
      useful parsers are in the real world. It likely owes as much or more to
      the fact that this topic is susceptible to being discussed in a rigorous
      mathematical language -- theorems, proofs... heavy use of greek letters
      such as epsilon and sigma... you get my drift... Now, I think that I may
      as well be clear about one thing up front: I am no theoretician. And I
      am pretty much completely ignorant of all of the theoretical literature.
      I say that without any special pride -- or any particular sense of shame
      either. That's just how it is. However, I am satisfied that it is pretty
      much completely beside the point. I do not believe that my approach to
      the writing of this manual, or even to JavaCC development in general,
      would be substantially different if I did have a stronger theoretical
      computer science background. Certainly, the appropriate focus of this
      manual would still be what it is regardless: concrete examples with
      working code.</para>

      <para>Still, before diving into an initial example, I will try to answer
      the question I posed above, namely: what is a parser generator and why
      should I be interested in using such a thing? (Maybe that is really two
      questions, but never mind....) As I said, not only am I no theoretician,
      moreoever, I am not even making a serious attempt to use a rigorously
      defined terminology. So, you can (and probably should) take my
      definitions and usage of such terms as <emphasis>parser</emphasis>,
      <emphasis>grammar</emphasis> or <emphasis>language</emphasis> with a big
      grain of salt. Okay, now that I have dispensed with the caveats, here
      goes:</para>

      <para><quote>A <emphasis>parser generator</emphasis> is a tool that
      takes a high level description of a text's structure or
      <emphasis>language</emphasis> -- we refer to this description as the
      <emphasis>grammar</emphasis> -- and converts that into the real working
      code for a <emphasis>parser</emphasis>, a program that can take text
      written in that language and break it down into its various lexical and
      syntactical pieces. </quote></para>

      <para>Now, for the next question: why should I want to use a parser
      generator?</para>

      <para>You do not absolutely have to use a parser generator such as
      JavaCC to create a parser. You can certainly code a parser directly in
      Java or the programming language of your choice. However, using a parser
      generator such as JavaCC will be a much more effective approach for
      substantially the same reason that using a higher level object-oriented
      programming language (Java or C# for example) will be preferable to
      using a lower level language (such as C) for the vast majority of
      programming tasks. The object-oriented language enables you to work at a
      level that is much closer to the actual problem domain. You can define
      and work with object types like <code>Product</code> or
      <code>Customer</code>, instead of getting hung up thinking about
      machine-level details, such as bytes and pointers to address offsets.
      Similarly, when you use a parser generator, you are working at a level
      that is much closer to the probem at hand, directly declaring the
      syntactical constructs that make up the input rather than working at the
      level of: "if the next character from the stream is a space or carriage
      return, then we scan forward past the rest of the whitespace until we
      hit a semicolon or colon...". You don't have to write (or, more
      importantly, <emphasis>maintain</emphasis>) that kind of code any more,
      since it is being <emphasis>generated</emphasis> from your higher-level
      description.</para>
    </simplesect>
  </preface>

  <part xml:id="tutorial1">
    <title>A Jumpstart Tutorial</title>

    <partintro xml:id="tutorial1.prerequisites">
      <title>Prerequisites</title>

      <para>In this tutorial, we'll build a parser that can handle
      four-function calculator arithmetic. Some very minimal assumptions are
      made in terms of your work environment. I assume that you have a JDK
      installed on your machine. This must be version 1.5 or later. It is
      assumed that you have downloaded and decompressed the javacc
      distribution on your hard drive. Also, you have your PATH environment
      variable set such that you can type the commands:</para>

      <para><command>java</command></para>

      <para>and:</para>

      <para><command>javac</command></para>

      <para>and:</para>

      <para><command>javacc</command></para>

      <para>at a command prompt with no parameters and get a list of the
      respective tools' options. This basically means that you have added the
      directories <filename>JDK_ROOT/bin</filename> and
      <filename>JAVACC_ROOT/bin</filename> to your <varname>PATH</varname>,
      where <varname>JDK_ROOT</varname> and <varname>JAVACC_ROOT</varname> are
      respectively the root directories of the JDK and of where you
      decompressed javacc.</para>

      <para>I also assume that you have a plain text editor in which to write
      source code. Microsoft Notepad will do fine, though I hope for your sake
      that you have something better than that in your tool stack! (If you
      don't, I suggest you go and get one <link
      xlink:href="http://jedit.org">here</link>.)</para>
    </partintro>

    <chapter xml:id="tutorial1.step1">
      <title>First Steps</title>

      <sect1 xml:id="tutorial1.step1.first_grammar">
        <title>Our first grammar</title>

        <para>As I said, in this tutorial, we will build up a parser for
        four-function arithmetic, but we are going to start with a subset.
        We'll just handle addition for now -- the addition of positive decimal
        numbers to be exact. Our first parser will be able to handle:</para>

        <itemizedlist>
          <listitem>
            <para>A decimal number, such as <code>79</code>, or
            <code>3.14</code>, or <code>0.78</code></para>
          </listitem>

          <listitem>
            <para>Two or more decimal numbers added together, such as
            <code>2+2</code>, or <code>0 + 3.14 + 2.718</code>, for
            example....</para>
          </listitem>
        </itemizedlist>

        <para>Those of you who are parser generation veterans will know what
        is needed here. Namely: on the <emphasis>lexical</emphasis> level, we
        need to define two kinds of <emphasis>token</emphasis>, the plus
        operator, and a <emphasis>regular expression</emphasis> that matches
        decimal numbers. On the <emphasis>syntactical</emphasis> level, we
        need a <emphasis>production</emphasis> that represents a sequence of
        one or more decimal numbers separated by <code>+</code> signs. Now, I
        am perfectly aware that for people without that background, the above
        two sentences will be gobbledygook. I certainly am not assuming that
        all readers know what is meant by the terms
        <emphasis>token</emphasis>, <emphasis>regular expression</emphasis>,
        or <emphasis>production</emphasis>. And I realize that the distinction
        between the <emphasis>lexical</emphasis> and the
        <emphasis>syntactical</emphasis> may be fuzzy in your mind at best.
        However, I see little point in defining these things at this point.
        The best way to demystify all of this is to jump into some actual
        code.</para>

        <para>In your text editor, create a new file and insert the following
        code:</para>

        <programlisting language="javacc">TOKEN : {
   &lt;PLUS : "+"&gt;
   |
   &lt;NUMBER :  (["0"-"9"])+ ("."(["0"-"9"])+)?&gt;
}

SKIP : {
  " " | "\t" | "\n" | "\r"
}

void AdditiveExpression() :
{}
{
    &lt;NUMBER&gt;
    (
      &lt;PLUS&gt;
      &lt;NUMBER&gt;
    )*
}
</programlisting>

        <para>Even if you have never written a grammar before, it should be
        fairly obvious which parts of the grammar correspond to the various
        elements described above. <code>PLUS</code> and <code>NUMBER</code>
        are the two <emphasis>token</emphasis> types. The strange looking text
        that follows NUMBER is the so-called <emphasis>regular
        expression</emphasis> that matches decimal numbers. Further down,
        <code>AdditiveExpression</code> is the <emphasis>syntactical
        production</emphasis> that matches one or more numbers with
        intervening plus signs. Note, by the way, that, we also have a
        specification starting with SKIP. That says that whitespace characters
        should be skipped. This allows the parser to handle <code>2 +2</code>
        or <code>2+ 2, for example,</code> since it ignores the spaces, in the
        input (as well as tabs, carriage returns, and linefeeds). Okay,
        without further ado, save the file as
        <filename>Arithmetic.javacc</filename> and bring up a command-line and
        <command>cd</command> into the directory where you saved the file. Now
        run:</para>

        <para><command>javacc Arithmetic.javacc</command></para>

        <para>This command should have generated a bunch of files in the
        current working directory. If it didn't, it is either because a typo
        slipped into your <filename>Arithmetic.javacc</filename> file or you
        don't have your environment set up as indicated, i.e. the
        java/javac/javacc programs on your system
        <varname>PATH</varname>.</para>

        <para>Anyway, assuming the above command ran without error, you now
        have a whole bunch of generated java code in that directory. Oh, about
        2000 lines of code in 13 files. As you can see, JavaCC generates quite
        a bit of boilerplate for even the most minimal grammar file. If you
        haven't done so already (for many, it is surely a reflex) then compile
        the code with:</para>

        <para><command>javac *.java</command></para>

        <para>Now, I would hope that you are at least a little bit curious
        about all this code that the little grammar file above is responsible
        for generating. While there's nothing wrong with simply bringing it up
        in your editor and looking at it, probably a better way to get an
        initial bird's eye view is to use the javadoc tool to generate some
        navigable API documentation. So, let's do that. On the command-line,
        enter:</para>

        <para><command>javadoc *.java</command></para>

        <para>And let's have a look. If we open
        <filename>package-tree.html</filename> in a web browser, we can get a
        view of the various classes that JavaCC has generated. As
        foreshadowing for the next section, where we write some code that uses
        the parser, let me point out the classes we are going to interact
        with. The class that is the actual parser is called, not surprisingly,
        <classname>ArithmeticParser</classname>, and lives in the file
        <filename>ArithmeticParser.java</filename>. We will also use the
        various classes named for the various elements in our grammar,
        <classname>Number</classname>, <classname>PLUS</classname>, and
        <classname>AdditiveExpression</classname>. Note that these three
        classes all implement the <interfacename>Node</interfacename>
        interface defined in <filename>Node.java</filename>. The
        <classname>AdditiveExpression</classname> implements Node because it
        is a subclass of <classname>BaseNode</classname>, which in turn
        implements <interfacename>Node</interfacename>.
        <classname>NUMBER</classname> and <classname>PLUS</classname> are
        subclasses of <classname>Token</classname>, which also implements the
        <interfacename>Node</interfacename> interface.</para>

        <para>These various generated <interfacename>Node</interfacename>
        objects -- specifically in this case <classname>NUMBER</classname>,
        <classname>PLUS</classname>, and
        <classname>AdditiveExpression</classname> -- are the building blocks
        from which our generated parser will construct an
        <emphasis>AST</emphasis> (abstract syntax tree) which represents the
        parsed input.</para>
      </sect1>

      <sect1 xml:id="tutorial1.step1.using_first_grammar">
        <title>Testing our parser</title>

        <para>Now that we have generated the code for a parser, the next
        natural question is: how do we use it? In a first example, we'll write
        a little program that reads the input text from stdin and then outputs
        the following to stdout:</para>

        <itemizedlist>
          <listitem>
            <para>A tree representation of the input. (This is called the
            <emphasis>AST</emphasis>, which is short for <emphasis>abstract
            syntax tree</emphasis>.)</para>
          </listitem>
        </itemizedlist>

        <itemizedlist>
          <listitem>
            <para>The result. In other words, it will
            <emphasis>evaluate</emphasis> the arithmetic expression that was
            input. (Gee, it's hard to talk about this at an abstract level.
            What I mean is that if the input is 2+2 it outputs 4,
            okay?)</para>
          </listitem>
        </itemizedlist>

        <para>Now, in your text editor, start a new file and input the
        following java code:</para>

        <programlisting language="java">import java.io.*;
import java.util.*;

public class ArithmeticTest {
    static public void main(String[] args) throws ParseException {
        ArithmeticParser parser = new ArithmeticParser(new InputStreamReader(System.in));
        parser.AdditiveExpression();
        Node root = parser.rootNode();
        System.out.println("Dumping the AST...");
        Nodes.dump(root, "  ");
        System.out.println("The result is: " + evaluate(root));
    }

    static double evaluate(Node node) {
        if (node instanceof NUMBER) {
            return Double.parseDouble(node.toString());
        }
        List&lt;NUMBER&gt; numbers = Nodes.childrenOfType(node, NUMBER.class);
        double result = 0.0;
        for (NUMBER num : numbers) {
            result += evaluate(num);
        }
        return result;
    }
}</programlisting>

        <para>Save this as <filename>ArithmeticTest.java</filename> in the
        same directory where you have all the other (generated) java code. At
        the command-line, enter:</para>

        <para><command>javac ArithmeticTest.java</command></para>

        <para>Now, to run the test from the command line with some input, try
        the following (or something reasonably similar, it hardly
        matters):</para>

        <para><command>echo 7 | java ArithmeticTest</command></para>

        <para>and then something like:</para>

        <para><command>echo 2+2 | java ArithmeticTest</command></para>

        <para>and then something like:</para>

        <para><command>echo 5 + 0.7 + 3.14 | java
        ArithmeticTest</command></para>

        <para>Let's examine the code in
        <filename>ArithmeticTest.java</filename> a bit more closely.
        Basically, the first two lines of the main method are what unleash the
        parser machinery on the input from stdin. The first line instantiates
        a new <classname>ArithmeticParser</classname> object that will get its
        input from stdin. The second line tells it to parse this as an
        <classname>AdditiveExpression</classname> construct -- which, it so
        happens is the only syntactical construct this parser knows about.
        Note that, at this point, after those two lines, the parser has done
        its job. It has read in the input, parsed it, and built up a tree. All
        the rest of the code basically operates on this tree that was
        built.</para>

        <para>The third line in the <methodname>main</methodname> method
        simply returns the root <emphasis>Node</emphasis> object of the
        generated AST. The <code>Nodes.dump</code> method we call then is
        simply a little utility routine that JavaCC provides you for debugging
        purposes. It recursively dumps a node to stdout. Note that the root
        node here must be either a <classname>NUMBER</classname> object or an
        <classname>AdditiveExpression</classname> object. The former case is
        the simple, trivial one. This is when the the input string was just a
        number, like 7 or 2.3 or something. And then our AST is trivial: it is
        just a single node, with no descendants. As you could see running the
        above examples, the parse tree is a bit more interesting in the second
        case. In that case, the root node is an
        <classname>AdditiveExpression</classname> object that has various
        <classname>NUMBER</classname> and <classname>PLUS</classname> objects
        as child nodes.</para>

        <para>Now, as for the <methodname>evaluate</methodname> method, it
        takes a <interfacename>Node</interfacename> as an argument. In this
        concrete case, the <interfacename>Node</interfacename> passed in can
        be one of two types: <classname>NUMBER</classname> or an
        <classname>AdditiveExpression</classname>. Again, the first case is
        trivial and should not require much comment. It uses the handy little
        fact that (unless you override it) a <classname>Token</classname>'s
        <methodname>toString</methodname>() method simply returns the text
        that was matched. So, node.toString() simply returns the text of the
        number. The core java API method <code>Double.parseDouble(...)</code>
        is used to turn that into an actual number. Now, in the other case,
        when the Node input is an instance of
        <classname>AdditiveExpression</classname>, we make use of a utility
        method that JavaCC provides us, which is
        <code>Nodes.childrenOfType</code>. This gives us a
        <classname>List</classname> of all the child nodes of a certain type,
        in this case, <classname>NUMBER</classname>. Note that in this case,
        we can just ignore all the PLUS nodes; our task is simplified by the
        fact that we are only handling one kind of arithmetic operation.
        Later, as we develop the example, we'll have more operators, so we'll
        have to look at them to know whether to add or subtract, for example.
        Or whether to multiply or divide. This will complicate matters
        somewhat, but hardly takes this to the level of rocket science.</para>
      </sect1>

      <sect1 xml:id="tutorial1.step1.errors">
        <title>Erroneous Input</title>

        <para>It is worth noting what happens if we feed in different kinds of
        erroneous input to our program. For example, try:</para>

        <para><command>echo 2-2 | java ArithmeticTest</command></para>

        <para>and then:</para>

        <para><command>echo 2 + +2 | java ArithmeticTest</command></para>

        <para>In the first case, the expression <code>2-2</code>, the parser
        throws a <classname>LexicalException</classname>, indicating that
        there is a <emphasis>lexical</emphasis> probem in the input. However,
        on the second input, <code>2 + +2</code>, a different exception class
        is thrown, namely <classname>ParseException</classname>, and the error
        message is quite different. It is complaining about the second
        <code>+</code> character, saying that it is expecting a number here.
        </para>

        <para>It is worth understanding why these are two completely different
        kinds of error. You see, your parser machinery actually contains two
        distinct "machines". The first is a <emphasis>Lexer</emphasis>, which
        breaks the input down into <emphasis>tokens</emphasis>. In our
        specific case, that means that it reads the input and converts it into
        a stream of numbers and plus signs. That stream of tokens is what is
        fed into another machine (the parser proper, one could say) that
        groups these <emphasis>tokens</emphasis> into the various syntactical
        <emphasis>productions</emphasis> that make up the grammar. So, you
        see, for the first input, it is actually the
        <emphasis>Lexer</emphasis> that is failing to break up the input into
        tokens; it is completely bewildered (pardon the anthropomorhism) once
        it hits the minus sign, for the simple reason that there is no token
        in the grammar that contains that character. </para>

        <para>On the other hand, in the second case, the
        <emphasis>Lexer</emphasis> machinery has no problem doing its job of
        breaking the input into tokens. The Lexer is completely happy (again,
        pardon the anthropomorphism) as it sees a number followed by a plus
        sign, followed by another plus sign, followed by a number. Put another
        way, there is no <emphasis>lexical</emphasis> problem here. Of course,
        there is a problem, but it is at a higher (syntactical) level, and
        thus, is caught at that level. </para>
      </sect1>

      <sect1 xml:id="tutorial1.step1.recap">
        <title>Recap</title>

        <para>Let's run over the main points we have covered so far.</para>

        <para>TODO</para>
      </sect1>
    </chapter>

    <chapter>
      <title>Next Steps</title>

      <sect1>
        <title>Enhancing our Arithmetic Parser</title>

        <para>It does not take too much imagination to think of some
        enhancements to the arithmetic parser we started developing in the
        last chapter -- subtraction, multiplication, and division for example!
        Also, once we have additive and multiplicative operations, we really
        ought to introduce parentheses for grouping, so that we can write
        (3+6)*7, for example, so as to have the addition performed before the
        multiplication.</para>

        <para>Okay, let's see how this can be implemented in code. Bring up
        the <filename>Arithmetic.javacc</filename> file in your editor and
        make it look like the following:</para>

        <programlisting>TOKEN : {
   &lt;PLUS : "+"&gt;
   |
   &lt;MINUS : "-"&gt;
   |
   &lt;TIMES : "*"&gt;
   |
   &lt;DIVIDE : "/"&gt;
   |
   &lt;OPEN_PAREN : "("&gt;
   |
   &lt;CLOSE_PAREN : ")"&gt;
   |
   &lt;NUMBER :  (["0"-"9"])+ ("."(["0"-"9"])+)?&gt;
}

SKIP : {
  " " | "\t" | "\n" | "\r"
}

void AdditiveExpression() :
{}
{
    MultiplicativeExpression()
    (
      (&lt;PLUS&gt;|&lt;MINUS&gt;)
      MultiplicativeExpression()
    )*
}

void MultiplicativeExpression() :
{}
{
    (&lt;NUMBER&gt; | ParentheticalExpression())
    (
       (&lt;TIMES&gt;|&lt;DIVIDE&gt;)
       (&lt;NUMBER&gt; | ParentheticalExpression())
    )*
}

void ParentheticalExpression() :
{}
{
    &lt;OPEN_PAREN&gt;
    AdditiveExpression()
    &lt;CLOSE_PAREN&gt;
}
</programlisting>

        <para>Now, let's take stock of things. We have introduced a number of
        new tokens. Five to be exact: <code>MINUS</code>, <code>TIMES</code>,
        <code>DIVIDE</code>, <code>OPEN_PAREN</code>, and
        <code>CLOSE_PAREN</code>. We have introduced two new syntactical
        productions: <code>MultiplicativeExpression</code> and
        <code>ParentheticalExpression</code>. The
        <code>AdditiveExpression</code> production is still there, but has
        been changed somewhat. For one thing, there is now a choice construct,
        <code>(&lt;PLUS&gt;|&lt;MINUS&gt;)</code> where there was only
        <code>&lt;PLUS&gt;</code> before. Also, where before, the production
        referred to <code>&lt;NUMBER&gt;</code> tokens, it now refers to the
        new MultiplicativeExpression() production. </para>

        <para>We will also need to enhance our test harness to handle the more
        complex AST that this grammar can generate. So, bring up your
        ArithmeticTest.java and make it look like the following:</para>

        <programlisting>import java.io.*;
import java.util.*;

public class ArithmeticTest {
    static public void main(String[] args) throws ParseException {
       ArithmeticParser parser = new ArithmeticParser(new InputStreamReader(System.in));
       parser.AdditiveExpression();
       Node root = parser.rootNode();
       System.out.println("Dumping the AST...");
       Nodes.dump(root, "  ");
       System.out.println("The result is: " + evaluate(root));
    }

    static double evaluate(Node node) {
        if (node instanceof NUMBER) {
            return Double.parseDouble(node.toString());
        }
        if (node instanceof ParentheticalExpression) {
            return evaluate(node.getChild(1));
        }
        Iterator&lt;Node&gt; iterator = Nodes.iterator(node);
        double result = evaluate(iterator.next());
        while (iterator.hasNext()) {
            Node operator = iterator.next();
            double nextValue = evaluate(iterator.next());
            if (operator instanceof PLUS) {
                result += nextValue;
            }
            else if (operator instanceof MINUS) {
                result -= nextValue;
            }
            else if (operator instanceof TIMES) {
                result *= nextValue;
            }
            else if (operator instanceof DIVIDE) {
                result /= nextValue;
            }
        }
        return result;
    }
}</programlisting>

        <para>So, what is new here? Well, our <methodname>main</methodname>
        method did not actually change at all. All the changes are in the
        <methodname>evaluate</methodname> method, as it now has to handle more
        constructs. Nonetheless, it starts out the same as our older version
        did. If the node passed in is a NUMBER token, it simply passes back
        the corresponding double value, using a standard Java API to do so.
        The new production <code>ParentheticalExpression</code> is handled in
        a typical <emphasis>recursive</emphasis> way: it gets the expression
        inside the parentheses and recursively calls the
        <methodname>evaluate</methodname> method on it. Note that this is
        <code>node.getChild(1)</code>, since <code>node.getChild(0)</code>
        will give us the <code>OPEN_PAREN</code> token and
        <code>node.getChild(2)</code> will return the <code>CLOSE_PAREN</code>
        token.</para>

        <para>It turns out that <code>AdditiveExpression</code> and
        <code>MultiplicativeExpression</code>, which are the two remaining
        node types to handle, do not really have to be handled separately. In
        either case, we simply iterate over the child nodes, applying the
        operation corresponding to the intervening operator tokens --
        addition, subtraction, multiplication or division. Note that in the
        line that evaluates the <varname>nextValue</varname> variable, there
        is no need to use <code>iterator.hasNext()</code> to check whether
        there is another Node. You should be able to convince yourself quite
        easily that, given the grammar that the input necessarily follows (if
        it didn't, an exception would have been thrown earlier) there must be
        at least one more Node at this point. </para>

        <para>Okay, let's take it for a spin. We build the example the same as
        last time. Generate the java source with:</para>

        <para><command>javacc Arithmetic.javacc</command></para>

        <para>and compile it all using:</para>

        <para><command>javac *.java</command></para>

        <para>Now,let's try it out on a some arithmetic expressions. Try,
        say:</para>

        <para><command>echo 2*3 + 4/5 | java Arithmetic</command></para>

        <para>and now, trying out parentheses:</para>

        <para><command>echo (2*3 + 4)/5 | java Arithmetic</command></para>

        <para>Note that in a Unix-derived shell (whether on an actual *nix
        system or a unix-style shell like cygwin bash on Windows) for reasons
        that don't seem worth getting into here (even if it is, ironically
        enough, related to parsing) the arithmetic expression above must be
        written in quotes, i.e.</para>

        <para><command>echo "(2*3+4)/5" | java Arithmetic</command></para>

        <para>Come to think of it, any input piped in this way should be
        quoted in a unix-derived shell. Not only are the parentheses
        characters a problem unquoted, but there is also a tendency for a
        <code>*</code> character to be replaced with a list of all the files
        in the current directory. (For example, <code>2*3</code> works
        unquoted but not <code>2 * 3</code>).</para>
      </sect1>
    </chapter>
  </part>
</book>
