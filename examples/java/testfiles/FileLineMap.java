/* Generated by: JavaCC 21 Parser Generator. FileLineMap.java */
package org.parsers.json;

import java.io.IOException;
import java.io.Reader;
import java.util.HashMap;
import java.util.Map;
import java.util.BitSet;
import java.nio.charset.Charset;
/**
 * Rather bloody-minded implementation of a class to read in a file 
 * and store the contents in a String, and keep track of where the 
 * lines are.
 */
@SuppressWarnings("unused")
public class FileLineMap {
    private static final int[] EMPTY_INT= new int[0];
    static private Map<String, FileLineMap> mapsByName= new HashMap<> ();
    /**
     * Get a FileLineMap by name
     * @param name the lookup name
     * @return the FileLineMap object that is retrieved (possibly null)
     */
    static public FileLineMap getFileLineMapByName(String name) {
        return mapsByName.get(name);
    }

    /**
     * There is something of a memory retention problem
     * with this static lookup map, so this method
     * allows you to just clear the map, assuming you
     * know that none of the entries are needed any more.
     */
    static public void clearFileLineMapCache() {
        mapsByName.clear();
    }

    /**
     * A method to uncache a FileLineMap. There is something of a 
     * memory retention problem, so if you know for sure that 
     * the referenced FileLineMap is not needed, you can use 
     * this method to allow it to be garbage collected.
     * @param inputSource the lookup name 
     * @return the FileLineMap object that was uncached (or null)
     */
    static public FileLineMap clearFileLineMapCacheEntry(String inputSource) {
        return mapsByName.remove(inputSource);
    }

    // Munged content, possibly replace unicode escapes, tabs, or CRLF with LF.
    private final CharSequence content;
    // Typically a filename, I suppose.
    private String inputSource;
    // A list of offsets of the beginning of lines
    private final int[] lineOffsets;
    private int startingLine, startingColumn;
    private int bufferPosition, tokenBeginLine, line, column;
    // If this is set, it determines 
    // which lines in the file are actually processed.
    private BitSet parsedLines;
    /**
     * @return true if we actually parse this line.
     * (Or really whether we lex it, since what happens here is pre-lexical!)
     */
    private boolean isParsedLine(int lineNumber) {
        return parsedLines== null||parsedLines.get(1+lineNumber-startingLine);
    }

    /**
     * This is used in conjunction with having a preprocessor.
     * We set which lines are actually parsed lines and the 
     * unset ones are ignored. Note that this BitSet (unlike most of the rest of the API)
     * uses zero-based (not 1-based) logic
     * @param parsedLines a #java.util.BitSet that holds which lines
     * are parsed (i.e. not ignored)
     */
    public void setParsedLines(BitSet parsedLines) {
        this.parsedLines= parsedLines;
    }

    /**
     * This constructor may not be used much soon. Pretty soon all the generated API
     * will tend to use #java.nio.file.Path rather than java.io classes like Reader
     * @param inputSource the lookup name of this FileLineMap
     * @param reader The input to read from
     * @param startingLine location info used in error reporting, this is 1 typically, assuming
     * we started reading at the start of the file.
     * @param startingColumn location info used in error reporting, this is 1 typically, assuming
     * we started reading at the start of the file.
     */
    public FileLineMap(String inputSource, Reader reader, int startingLine, int startingColumn) {
        this(inputSource, readToEnd(reader), startingLine, startingColumn);
    }

    /**
     * Constructor that takes a String or string-like object as the input
     * @param inputSource the lookup name of this FileLineMap
     * @param content The input to read from
     */
    public FileLineMap(String inputSource, CharSequence content) {
        this(inputSource, content, 1, 1);
    }

    /**
     * Constructor that takes a String or string-like object as the input
     * @param inputSource the lookup name of this FileLineMap
     * @param content The input to read from
     * @param startingLine location info used in error reporting, this is 1 typically, assuming
     * we started reading at the start of the file.
     * @param startingColumn location info used in error reporting, this is 1 typically, assuming
     * we started reading at the start of the file.
     */
    public FileLineMap(String inputSource, CharSequence content, int startingLine, int startingColumn) {
        setInputSource(inputSource);
        this.content= mungeContent(content, 0, true, false, false);
        this.lineOffsets= createLineOffsetsTable(this.content);
        this.setStartPosition(startingLine, startingColumn);
    }

    // START API methods
    // Now some methods to fulfill the functionality that used to be in that
    // SimpleCharStream class
    /**
     * Backup a certain number of characters
     * This method is dead simple by design and does not handle any of the messiness
     * with column numbers relating to tabs or unicode escapes. 
     * @param amount the number of characters to backup.
     */
    public void backup(int amount) {
        for (int i= 0; i<amount; i++) {
            if (column== 1) {
                backupLine();
            }
            else  {
                --column;
                --bufferPosition;
                if (bufferPosition> 0&&column> 1&&Character.isLowSurrogate(content.charAt(bufferPosition))) {
                    if (Character.isHighSurrogate(content.charAt(bufferPosition-1))) {
                        --column;
                        --bufferPosition;
                    }
                }
            }
        }
    }

    void forward(int amount) {
        for (int i= 0; i<amount; i++) {
            if (column<getLineLength(line)) {
                ++bufferPosition;
                ++column;
                if (Character.isLowSurrogate(content.charAt(bufferPosition))) {
                    if (Character.isHighSurrogate(content.charAt(bufferPosition-1))) {
                        ++bufferPosition;
                        ++column;
                    }
                }
            }
            else  {
                advanceLine();
            }
        }
    }

    private void advanceLine() {
        do {
            ++line;
        }
        while (!isParsedLine(line)&&line-startingLine<lineOffsets.length);
        if (line-startingLine>=lineOffsets.length) {
            bufferPosition= content.length();
        }
        else  {
            bufferPosition= getLineStartOffset(line);
        }
        column= 1;
    }

    private void backupLine() {
        do {
            --line;
        }
        while (!isParsedLine(line)&&line>=startingLine);
        if (line<startingLine) {
            goTo(startingLine, startingColumn);
        }
        else  {
            column= getLineLength(line);
            bufferPosition= getLineStartOffset(line)+column-1;
        }
    }

    int readChar() {
        if (bufferPosition>=content.length()) {
            return-1;
        }
        char ch= content.charAt(bufferPosition++);
        if (Character.isHighSurrogate(ch)&&bufferPosition<content.length()) {
            char nextChar= content.charAt(bufferPosition);
            if (Character.isLowSurrogate(nextChar)) {
                ++bufferPosition;
                column+=2;
                return Character.toCodePoint(ch, nextChar);
            }
        }
        if (ch== '\n') {
            advanceLine();
            column= 1;
        }
        else  {
            ++column;
        }
        return ch;
    }

    int getLine() {
        if (!isParsedLine(line)) advanceLine();
        return line;
    }

    int getColumn() {
        return column;
    }

    int getEndColumn() {
        if (column== 1) {
            if (line== tokenBeginLine) {
                return 1;
            }
            return getLineLength(line-1);
        }
        return column-1;
    }

    int getEndLine() {
        if (column== 1&&line> tokenBeginLine) return line-1;
        return line;
    }

    // But there is no goto in Java!!!
    void goTo(int line, int column) {
        this.bufferPosition= getOffset(line, column);
        this.line= line;
        this.column= column;
    }

    // END API methods
    private int getLineLength(int lineNumber) {
        int startOffset= getLineStartOffset(lineNumber);
        int endOffset= getLineEndOffset(lineNumber);
        return 1+endOffset-startOffset;
    }

    private int getLineStartOffset(int lineNumber) {
        int realLineNumber= lineNumber-startingLine;
        if (realLineNumber<=0) {
            return 0;
        }
        if (realLineNumber>=lineOffsets.length) {
            return content.length();
        }
        return lineOffsets[realLineNumber];
    }

    private int getLineEndOffset(int lineNumber) {
        int realLineNumber= lineNumber-startingLine;
        if (realLineNumber<0) {
            return 0;
        }
        if (realLineNumber>=lineOffsets.length) {
            return content.length();
        }
        if (realLineNumber== lineOffsets.length-1) {
            return content.length()-1;
        }
        return lineOffsets[realLineNumber+1]-1;
    }

    private void setStartPosition(int line, int column) {
        this.startingLine= line;
        this.startingColumn= column;
        this.line= line;
        this.column= column;
    }

    private int getOffset(int line, int column) {
        if (line== 0) line= startingLine;
        // REVISIT? This should not be necessary!
        int columnAdjustment= (line== startingLine)?startingColumn:
        1;
        return lineOffsets[line-startingLine]+column-columnAdjustment;
    }

    // ------------- private utilities method
    // Icky method to handle annoying stuff. Might make this public later if it is
    // needed elsewhere
    private static String mungeContent(CharSequence content, int tabsToSpaces, boolean preserveLines, boolean javaUnicodeEscape, boolean ensureFinalEndline) {
        if (tabsToSpaces<=0&&preserveLines&&!javaUnicodeEscape) {
            if (ensureFinalEndline) {
                int lastChar= content.charAt(content.length()-1);
                if (lastChar!='\n'&&lastChar!='\r') {
                    if (content instanceof StringBuilder) {
                        ((StringBuilder) content).appendCodePoint('\n');
                    }
                    else  {
                        StringBuilder buf= new StringBuilder(content);
                        buf.appendCodePoint('\n');
                        content= buf.toString();
                    }
                }
            }
            return content.toString();
        }
        StringBuilder buf= new StringBuilder();
        int index= 0;
        // This is just to handle tabs to spaces. If you don't have that setting set, it
        // is really unused.
        int col= 0;
        boolean justSawUnicodeEscape= false;
        // There is probably some better way of doing this with this Stream API, 
        // but, for now, I'm just translating the code I had working so I just
        // get the int[] array and iterate over it, like I did before with the chars
        // in the CharSequence.
        int[] codePoints= content.codePoints().toArray();
        while (index<codePoints.length) {
            int ch= codePoints[index++];
            if (ch== '\\'&&javaUnicodeEscape&&index<codePoints.length) {
                ch= codePoints[index++];
                if (ch!='u') {
                    justSawUnicodeEscape= false;
                    buf.appendCodePoint('\\');
                    buf.appendCodePoint(ch);
                    if (ch== '\n') col= 0;
                    else col+=2;
                }
                else  {
                    while (codePoints[index]== 'u') {
                        index++;
                        // col++;
                    }
                    StringBuilder hexBuf= new StringBuilder(4);
                    for (int i= 0; i<4; i++) hexBuf.appendCodePoint(codePoints[index++]);
                    char current= (char) Integer.parseInt(hexBuf.toString(), 16);
                    char last= buf.length()> 0?buf.charAt(buf.length()-1):
                    0;
                    if (justSawUnicodeEscape&&Character.isSurrogatePair(last, current)) {
                        buf.setLength(buf.length()-1);
                        --col;
                        buf.appendCodePoint(Character.toCodePoint(last, current));
                        justSawUnicodeEscape= false;
                    }
                    else  {
                        buf.append(current);
                        justSawUnicodeEscape= true;
                    }
                    // col +=6;
                    ++col;
                    // We're not going to be trying to track line/column information relative to the original content
                    // with tabs or unicode escape, so we just increment 1, not 6
                }
            }
            else if (ch== '\r'&&!preserveLines) {
                justSawUnicodeEscape= false;
                buf.appendCodePoint('\n');
                if (index<codePoints.length) {
                    ch= codePoints[index++];
                    if (ch!='\n') {
                        buf.appendCodePoint(ch);
                        ++col;
                    }
                    else col= 0;
                }
            }
            else if (ch== '\t'&&tabsToSpaces> 0) {
                justSawUnicodeEscape= false;
                int spacesToAdd= tabsToSpaces-col%tabsToSpaces;
                for (int i= 0; i<spacesToAdd; i++) {
                    buf.appendCodePoint(' ');
                    col++;
                }
            }
            else  {
                justSawUnicodeEscape= false;
                buf.appendCodePoint(ch);
                if (ch== '\n') {
                    col= 0;
                }
                else col++;
            }
        }
        if (ensureFinalEndline) {
            char lastChar= buf.charAt(buf.length()-1);
            if (lastChar!='\n'&&lastChar!='\r') buf.append((char)'\n');
        }
        return buf.toString();
    }

    private static int[] createLineOffsetsTable(CharSequence content) {
        if (content.length()== 0) {
            return EMPTY_INT;
        }
        int lineCount= 0;
        int length= content.length();
        for (int i= 0; i<length; i++) {
            char ch= content.charAt(i);
            if (ch== '\n') {
                lineCount++;
            }
        }
        if (content.charAt(length-1)!='\n') {
            lineCount++;
        }
        int[] lineOffsets= new int[lineCount];
        lineOffsets[0]= 0;
        int index= 1;
        for (int i= 0; i<length; i++) {
            char ch= content.charAt(i);
            if (ch== '\n') {
                if (i+1== length) break;
                lineOffsets[index++]= i+1;
            }
        }
        return lineOffsets;
    }

    public String getInputSource() {
        return inputSource;
    }

    void setInputSource(String inputSource) {
        mapsByName.put(inputSource, this);
        this.inputSource= inputSource;
    }

    String getText(int beginLine, int beginColumn, int endLine, int endColumn) {
        int startOffset= getOffset(beginLine, beginColumn);
        int endOffset= getOffset(endLine, endColumn);
        return getText(startOffset, endOffset);
    }

    private String getText(int startOffset, int endOffset) {
        return content.subSequence(startOffset, endOffset+1).toString();
    }

    static private int BUF_SIZE= 0x10000;
    // Annoying kludge really...
    static String readToEnd(Reader reader) {
        try {
            return readFully(reader);
        }
        catch(IOException ioe) {
            throw new RuntimeException(ioe);
        }
    }

    static String readFully(Reader reader) throws IOException {
        char[] block= new char[BUF_SIZE];
        int charsRead= reader.read(block);
        if (charsRead<0) {
            throw new IOException("No input");
        }
        else if (charsRead<BUF_SIZE) {
            char[] result= new char[charsRead];
            System.arraycopy(block, 0, result, 0, charsRead);
            reader.close();
            return new String(block, 0, charsRead);
        }
        StringBuilder buf= new StringBuilder();
        buf.append(block);
        do {
            charsRead= reader.read(block);
            if (charsRead> 0) {
                buf.append(block, 0, charsRead);
            }
        }
        while (charsRead== BUF_SIZE);
        reader.close();
        return buf.toString();
    }

    /**
     * Rather bloody-minded way of converting a byte array into a string
     * taking into account the initial byte order mark (used by Microsoft a lot seemingly)
     * See: https://docs.microsoft.com/es-es/globalization/encoding/byte-order-markc
     * @param bytes the raw byte array 
     * @return A String taking into account the encoding in the byte order mark (if it was present). If no
     * byte-order mark was present, it assumes the raw input is in UTF-8.
     */
    static public String stringFromBytes(byte[] bytes) {
        int arrayLength= bytes.length;
        int firstByte= arrayLength> 0?Byte.toUnsignedInt(bytes[0]):
        1;
        int secondByte= arrayLength> 1?Byte.toUnsignedInt(bytes[1]):
        1;
        int thirdByte= arrayLength> 2?Byte.toUnsignedInt(bytes[2]):
        1;
        int fourthByte= arrayLength> 3?Byte.toUnsignedInt(bytes[3]):
        1;
        if (firstByte== 0xEF&&secondByte== 0xBB&&thirdByte== 0xBF) {
            return new String(bytes, 3, bytes.length-3, Charset.forName("UTF-8"));
        }
        if (firstByte== 0&&secondByte== 0&&thirdByte== 0xFE&&fourthByte== 0xFF) {
            return new String(bytes, 4, bytes.length-4, Charset.forName("UTF-32BE"));
        }
        if (firstByte== 0xFF&&secondByte== 0xFE&&thirdByte== 0&&fourthByte== 0) {
            return new String(bytes, 4, bytes.length-4, Charset.forName("UTF-32LE"));
        }
        if (firstByte== 0xFE&&secondByte== 0xFF) {
            return new String(bytes, 2, bytes.length-2, Charset.forName("UTF-16BE"));
        }
        if (firstByte== 0xFF&&secondByte== 0xFE) {
            return new String(bytes, 2, bytes.length-2, Charset.forName("UTF-16LE"));
        }
        return new String(bytes, Charset.forName("UTF-8"));
    }

}
