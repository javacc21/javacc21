/* Copyright (c) 2008-2021 Jonathan Revusky, revusky@javacc.com
 * Copyright (c) 2021 Vinay Sajip, vinay_sajip@yahoo.co.uk - changes for Python support.
 * Copyright (c) 2006, Sun Microsystems Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notices,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name Jonathan Revusky, Sun Microsystems, Inc.
 *       nor the names of any contributors may be used to endorse or promote
 *       products derived from this software without specific prior written
 *       permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

 // This is the Java grammar that is used (via an INCLUDE) in the JavaCC 21 
 // tool itself but it can be used on its own, and you are free to use it
 // in your own projects. It supports the stable feature set of the Java 
 // language up to JDK 16. 
 // This grammar is a forward evolution of the sample Java grammar originally 
 // included in the legacy JavaCC distribution in 1997 or thereabouts, but is
 // close to being a total rewrite, and serves as a kind of showcase for the latest
 // features in JavaCC 21, so many constructs are expressed in a very clean
 // and elegant way that is simply not possible with the legacy tool.

JAVA_UNICODE_ESCAPE;
PARSER_PACKAGE=org.parsers.java;
NODE_PACKAGE=org.parsers.java.ast;
DEFAULT_LEXICAL_STATE=JAVA;
PRESERVE_LINE_ENDINGS=false;
TABS_TO_SPACES=8;
// The following is actually unnecessary. I just include it to
// be able to check that the feature is working!
DEACTIVATE_TOKENS=RUNSIGNEDSHIFT,RSIGNEDSHIFT;
//JDK_TARGET=15;

FAULT_TOLERANT;
DEBUG_FAULT_TOLERANT;

INCLUDE "JavaLexer.javacc"

INJECT PARSER_CLASS : {

  private Token TOKEN_HOOK(Token tok) {
    TokenType type = tok.getType();
    if (type != RECORD && (type != IDENTIFIER || !tok.getImage().equals("record"))) {
      return tok;
    }
    TokenType desiredType = inTypeDeclaration() ? RECORD : IDENTIFIER;
    if (type == desiredType) return tok;
    Token result = Token.newToken(desiredType, "record", tok.getInputSource());
    result.copyLocationInfo(tok);
    return result;
  }

  private boolean inTypeDeclaration() {
    String currentProduction = currentLookaheadProduction == null ? currentlyParsedProduction : currentLookaheadProduction;
    // We can use reference equality because the strings are all interned.
    return currentProduction == "TypeDeclaration" 
           || currentProduction == "AnnotationTypeDeclaration"
           || currentProduction == "ClassDeclaration"
           || currentProduction == "InterfaceDeclaration"
           || currentProduction == "RecordDeclaration"
           || currentProduction == "EnumDeclaration"; 
  }
}

#CompilationUnit# :
  [ PackageDeclaration! ]
  ( ImportDeclaration )*!
  ( TypeDeclaration )+!
  [<EOF>]
  {
    return CURRENT_NODE;
  }
;

PackageDeclaration : (Annotation)* "package" =>|| Name ";" ;

INJECT PackageDeclaration :
{
  public String getPackageName() {
    Node nameNode = getChild(getChildCount()-2);
    return nameNode.toString();
  }
}

ImportDeclaration : "import" [ "static" ] Name [ "." "*" ] ";" ;

Modifiers(EnumSet<TokenType> permissibleModifiers) #void :
 (
  SCAN {isParserTolerant() 
       || permissibleModifiers.contains(getToken(1).getType())}
  =>
  (
   "public"|"static"|"protected"|"private"|"final"|"abstract" 
   |"synchronized"|"native"|"transient"|"volatile"|"strictfp" 
   |"default"
  )
  {
    switch(lastConsumedToken.getType()) {
        case ABSTRACT :
        case FINAL :
           permissibleModifiers.remove(ABSTRACT);
           permissibleModifiers.remove(FINAL);
           break;
        case PRIVATE :
        case PROTECTED :
        case PUBLIC :
           permissibleModifiers.remove(PRIVATE);
           permissibleModifiers.remove(PROTECTED);
           permissibleModifiers.remove(PUBLIC);
           break;
        default : 
           permissibleModifiers.remove(lastConsumedToken.getType());
    }
  }
  |
  Annotation
 )*
;

TypeDeclaration #abstract :
  SCAN ";" | (Modifiers ("class" | "enum" | "interface" | "record" | "@" "interface")) =>
  (
    EmptyDeclaration 
    |
    AnnotationTypeDeclaration
    |
    ClassDeclaration
    |
    InterfaceDeclaration
    |
    EnumDeclaration
    |
    RecordDeclaration
  )
;

INJECT EmptyDeclaration : extends TypeDeclaration;
INJECT AnnotationTypeDeclaration : extends TypeDeclaration;
INJECT ClassDeclaration : extends TypeDeclaration;
INJECT InterfaceDeclaration : extends TypeDeclaration;
INJECT EnumDeclaration : extends TypeDeclaration;

EmptyDeclaration# : ";" ;

ClassDeclaration :
  Modifiers(EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, FINAL, STATIC, STRICTFP))
  "class" =>|| 
  <IDENTIFIER>
  [ TypeParameters ]
  [ ExtendsList]
  [ ImplementsList ]
  ClassOrInterfaceBody
;

InterfaceDeclaration :
  Modifiers(EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, STATIC, STRICTFP))
  "interface" =>||
  <IDENTIFIER>
  [ TypeParameters ]
  [ ExtendsList ] 
  ClassOrInterfaceBody
;

ExtendsList : 
   "extends" ObjectType
   ( 
     SCAN 1 \InterfaceDeclaration => 
     "," ObjectType 
   )*
;

INJECT ExtendsList :
import java.util.List; 
{
    public List<ObjectType> getTypes() {
        return childrenOfType(ObjectType.class);
    }
}

ImplementsList :
   "implements" ObjectType
   ( 
     "," ObjectType
   )*
;


EnumDeclaration :
   Modifiers(EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, FINAL, STATIC, STRICTFP))
   "enum" =>|| <IDENTIFIER>
   [ImplementsList] 
   EnumBody
;

EnumBody :
   "{"
   [ EnumConstant ( SCAN 2 "," EnumConstant )* ]
   [ "," ]
   [ ";" ( ClassOrInterfaceBodyDeclaration )*! ]
   "}"
;

RecordDeclaration :
  Modifiers(EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, FINAL, STATIC, STRICTFP))
  "record" =>||
  <IDENTIFIER>
  [TypeParameters]
  RecordHeader
  [ImplementsList]
  RecordBody
;

RecordHeader :
   "("
   [
     RecordComponent
     ("," RecordComponent)*
   ]
   ")"
;

RecordComponent :
   (Annotation)* Type [(Annotation)* "..."] <IDENTIFIER>
;

RecordBody :
  "{"
  (
   CompactConstructorDeclaration
   |
   ClassOrInterfaceBodyDeclaration
  )*
  "}"
;

CompactConstructorDeclaration :
  Modifiers(EnumSet.of(PUBLIC, PROTECTED, PRIVATE))
  <IDENTIFIER>
  "{"
  [ => ExplicitConstructorInvocation ]
  ( BlockStatement )*!
  "}" 
;

EnumConstant :
  (Annotation)* <IDENTIFIER> [ InvocationArguments ] [ ClassOrInterfaceBody ]
;

TypeParameters :
   "<"
   TypeParameter ( "," TypeParameter )* 
   DEACTIVATE_TOKENS(RSIGNEDSHIFT, RUNSIGNEDSHIFT) 
   ">"
;

INJECT TypeParameters : 
  import java.util.List;
{
    public List<TypeParameter> getParameters() {
        return childrenOfType(TypeParameter.class);
    }
}

TypeParameter: (Annotation)* <IDENTIFIER> =>|| [TypeBound];

TypeBound :
   "extends" ObjectType ( "&" ObjectType )*
;

ClassOrInterfaceBody : "{" (ClassOrInterfaceBodyDeclaration)*! "}" ;

ClassOrInterfaceBodyDeclaration# :
  Initializer
  |
  TypeDeclaration
  |
  ConstructorDeclaration
  |
  FieldDeclaration
  |
  MethodDeclaration
;

FieldDeclaration :
  Modifiers(EnumSet.of(PUBLIC, PROTECTED, PRIVATE, STATIC, FINAL, TRANSIENT, VOLATILE))
  Type VariableDeclarator =>|+1 ( "," VariableDeclarator )* ";"
;

VariableDeclarator : VariableDeclaratorId [ "=" VariableInitializer ] ;

VariableDeclaratorId : <IDENTIFIER> ( (Annotation)* "[" "]" )* ;

VariableInitializer : ArrayInitializer | Expression ;

ArrayInitializer :
  "{" [ VariableInitializer ( SCAN 2 "," VariableInitializer )* ] [ "," ] "}"
;

#MethodDeclaration :
  (
    SCAN \.\.\InterfaceDeclaration
    =>Modifiers(EnumSet.of(PUBLIC,PRIVATE,ABSTRACT,STATIC,SYNCHRONIZED,NATIVE,STRICTFP,_DEFAULT))
    |
    SCAN ~\...\TypeDeclaration // This is a kludge to support the code injection feature in JavaCC
                               // If we're not in a TypeDeclaration (most likely because we are in a JavaCC code injection)
                               // we just accept all the possible modifiers.
    => Modifiers(EnumSet.of(PUBLIC,PROTECTED,PRIVATE,ABSTRACT,STATIC,FINAL,SYNCHRONIZED,NATIVE,STRICTFP,_DEFAULT))
    |
    Modifiers(EnumSet.of(PUBLIC,PROTECTED,PRIVATE,ABSTRACT,STATIC,FINAL,SYNCHRONIZED,NATIVE,STRICTFP))
  )
  [ TypeParameters ]
  ReturnType
  <IDENTIFIER> 
  =>|+1 FormalParameters ( (Annotation)* "[" "]" )*
  [ ThrowsList ]
  ( Block | ";" )
  {return CURRENT_NODE;}
;

FormalParameters : "(" [ FormalParameter ( "," FormalParameter )* ] ")" ;

FormalParameter : Modifiers(EnumSet.of(FINAL)) Type [ (Annotation)* "..." ] VariableDeclaratorId ;

INJECT ConstructorDeclaration : extends ClassOrInterfaceBodyDeclaration

ConstructorDeclaration :
  Modifiers(EnumSet.of(PUBLIC, PROTECTED, PRIVATE))
  [ TypeParameters ]
  <IDENTIFIER> FormalParameters =>||
  [ ThrowsList ]
  "{"
  [ => ExplicitConstructorInvocation ]
  ( BlockStatement )*!
  "}"
;

ExplicitConstructorInvocation :
  [TypeArguments] ("this" | "super") =>|+1 InvocationArguments ";"
  |
  [=>Name "."] [TypeArguments] "super" =>|+1 InvocationArguments ";"
;

Initializer :
  [ "static" ] =>|+1 Block
;

Type#interface :
   => ReferenceType
   |
   PrimitiveType
;

INJECT ReferenceType : implements Type
INJECT PrimitiveArrayType : implements Type
INJECT PrimitiveType : implements Type
INJECT Primitive : implements Type

ReferenceType : 
   => PrimitiveArrayType
   |
   ObjectType (=> (Annotation)* "[" "]" )*
;

ObjectType# :
    (Annotation)*
    <IDENTIFIER> [ TypeArguments ]
    ( "." (Annotation)* <IDENTIFIER> =>|| [ TypeArguments ] )*
;

INJECT ObjectType : implements Type 
{
    public boolean equals(Object obj) {
        if (obj instanceof ObjectType) {
            return ((ObjectType) obj).toString().equals(this.toString());
        }
        return false;
    }
    
    public String toString() {
        StringBuilder buf = new StringBuilder();
        for (Token t : getRealTokens()) {
            buf.append(t);
        }
        return buf.toString();
    }
}

DiamondOperator :  "<" ">" =>|| ;

PossiblyEmptyTypeArguments #void :
   DiamondOperator
   |
   TypeArguments
;

TypeArguments : 
  SCAN 2
  "<" TypeArgument ( "," TypeArgument )* 
  DEACTIVATE_TOKENS(RSIGNEDSHIFT,RUNSIGNEDSHIFT) 
  ">" 
;

TypeArgument :
  (Annotation)* "?" =>|| [ WildcardBounds ]
  |
  ReferenceType
;

WildcardBounds : ("extends" | "super") ReferenceType ;

PrimitiveType :
  (Annotation)*
  "boolean" | "char" | "byte" | "short" | "int" | "long" | "float" | "double"
  =>||
;

PrimitiveArrayType : PrimitiveType (=> (Annotation)* "[" "]")+ ;

ReturnType# : "void" | Type ;

Name# : <IDENTIFIER> ( => "." <IDENTIFIER>)* ;

ThrowsList : "throws" Name ( "," Name )* ;

#Expression#interface :
    AssignmentExpression
    {return (Expression) peekNode();}
;

INJECT Expression :
{
  default boolean isAssignableTo() {return false;}
  default String getAsString() {return toString();}
}

INJECT AdditiveExpression : implements Expression
INJECT AndExpression : implements Expression 
INJECT AssignmentExpression : implements Expression
INJECT ConditionalAndExpression : implements Expression 
INJECT ConditionalOrExpression : implements Expression 
INJECT ConstructorInvocation : implements Expression 
INJECT EqualityExpression : implements Expression 
INJECT ExclusiveOrExpression : implements Expression 
INJECT InclusiveAndExpression : implements Expression 
INJECT InclusiveOrExpression : implements Expression 
INJECT InstanceOfExpression : implements Expression 
INJECT ClassLiteral : implements Expression
INJECT CodeBlock : implements Expression
INJECT DotSuper : implements Expression
INJECT DotThis : implements Expression
INJECT LambdaExpression : implements Expression 
INJECT MethodCall : implements Expression 
INJECT MethodReference : implements Expression 
INJECT MultiplicativeExpression : implements Expression
INJECT ObjectCastExpression : implements Expression
INJECT PostfixExpression : implements Expression
INJECT PreDecrementExpression : implements Expression
INJECT PreIncrementExpression : implements Expression
INJECT PrimitiveCastExpression : implements Expression
INJECT RelationalExpression : implements Expression 
INJECT ShiftExpression : implements Expression
INJECT SwitchExpression : implements Expression
INJECT TernaryExpression : implements Expression 
INJECT UnaryExpression : implements Expression
INJECT UnaryExpressionNotPlusMinus : implements Expression
INJECT LiteralExpression : implements Expression

INJECT Name : implements Expression {
  public boolean isAssignableTo() {return true;}
}

//INJECT Identifier : implements Expression {
//  public boolean isAssignableTo() {return true;}
//}


INJECT AllocationExpression : implements Expression {
  public boolean isConstructorInvocation() {return true;}
}

INJECT DotNew : extends AllocationExpression

INJECT DotName : implements Expression {
  public boolean isAssignableTo() {return true;}
}

INJECT ArrayAccess : implements Expression {
  public boolean isAssignableTo() {return true;}
}

AssignmentExpression :
  {
    Expression lhs;
  }
  TernaryExpression {lhs = (Expression) peekNode();}
  [
    SCAN 1 {lhs.isAssignableTo()}
    => AssignmentOperator Expression
  ]
;

AssignmentOperator #void :
  "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|="
;

TernaryExpression :
  ConditionalOrExpression [  "?" Expression ":" Expression ]
;

ConditionalOrExpression :
  ConditionalAndExpression ( "||" ConditionalAndExpression )*
;

ConditionalAndExpression :
  InclusiveOrExpression ( "&&" InclusiveOrExpression )*
;

InclusiveOrExpression :
  ExclusiveOrExpression ( "|" ExclusiveOrExpression )*
;

ExclusiveOrExpression :
  AndExpression ( "^" AndExpression )*
;

AndExpression :
  EqualityExpression ( "&" EqualityExpression )*
;

EqualityExpression :
  InstanceOfExpression ( ( "==" | "!=" ) InstanceOfExpression )*
;

InstanceOfExpression :
  RelationalExpression 
  [ 
    "instanceof" 
    (
      LocalVariableDeclaration // This is a stable feature in JDK 16.
      |
      Type
    )
  ]
;

RelationalExpression :
  ShiftExpression 
  (
    ( 
     "<" 
     | ">" 
     | "<=" 
     | ">=" 
    ) 
    ShiftExpression
  )*
;


ShiftExpression :
   AdditiveExpression
   ACTIVATE_TOKENS(RSIGNEDSHIFT,RUNSIGNEDSHIFT)
   (
      ("<<" | ">>" | ">>>")
      AdditiveExpression
   )*
;

AdditiveExpression :
  MultiplicativeExpression (  ( "+" | "-" ) MultiplicativeExpression )*
;

MultiplicativeExpression :
  UnaryExpression (  ( "*" | "/" | "%" ) UnaryExpression )*
;

UnaryExpression :
  ( "+" | "-" ) UnaryExpression
  |
  PreIncrementExpression
  |
  PreDecrementExpression
  |
  UnaryExpressionNotPlusMinus
;

PreIncrementExpression : 
  "++" UnaryExpression
  [
    SCAN {currentLookaheadToken == null && !((Expression)peekNode()).isAssignableTo()}#
    => FAIL "expression after ++ is not an assignable variable"
  ]
;

PreDecrementExpression : 
  "--" UnaryExpression 
  [
    SCAN {currentLookaheadToken!=null}# => {}
    |
    SCAN {!((Expression)peekNode()).isAssignableTo()}
    => FAIL "expression after -- is not an assignable variable"
  ]
;

UnaryExpressionNotPlusMinus :
  ( "~" | "!" ) UnaryExpression
  |
  LambdaExpression 
  |
  SwitchExpression
  |
  PrimitiveCastExpression 
  |
  ObjectCastExpression
  |
  PostfixExpression
;

PostfixExpression :
  PrimaryExpression 
  [ 
    SCAN 1 {currentLookaheadToken != null || ((Expression)peekNode()).isAssignableTo()}#
    =>
    "++" | "--" 
  ]
;

SwitchExpression# :
   SwitchStatement
;

PrimitiveCastExpression :
    "(" PrimitiveType ")" =>|| UnaryExpression
;

ObjectCastExpression :
   "(" ReferenceType ("&" ObjectType)* ")" =>|+1 UnaryExpressionNotPlusMinus
;

PrimaryExpression#void :
 (
  LiteralExpression
  |
  "this" #LiteralExpression
  |
  "super" #LiteralExpression
  |
  Parentheses
  |
  AllocationExpression 
  |
  ClassLiteral
  |
  MethodReference
  | 
  Name
 )
 (
  => "." "this" #DotThis(+1)
  |
  => "." "super" #DotSuper(+1)
  |
  ("." =>|+1 AllocationExpression) #DotNew(+1)
  |
  ("[" Expression "]") #ArrayAccess(+1) 
  | 
  ("." [TypeArguments] <IDENTIFIER>) #DotName(+1)
  |
  ("::" [TypeArguments] (<IDENTIFIER>|"new")) #MethodReference(+1)
  |
  SCAN 1 {lastConsumedToken.getType() == SUPER || lastConsumedToken.getType()==THIS}
  => InvocationArguments #ConstructorInvocation(+1)
  |
  InvocationArguments #MethodCall(+1)
 )*
;

LiteralExpression# : Literal ;

Parentheses : "(" Expression ")" ;

INJECT Parentheses : implements Expression {
  public Expression getNestedExpression() {return (Expression) getChild(1);}
  public boolean isAssignableTo() {return getNestedExpression().isAssignableTo();}
}

ClassLiteral : ("void" | Type) "." "class" =>|| ;

MethodReference :
    (Type | "super")
     "::" =>||
     (<IDENTIFIER>|"new")
;

Literal #void :
  <INTEGER_LITERAL>
  |
  <LONG_LITERAL>
  |
  <FLOATING_POINT_LITERAL>
  |
  <CHARACTER_LITERAL>
  |
  <STRING_LITERAL>
  |
  <TEXT_BLOCK_LITERAL>
  |
  "true"
  |
  "false"
  |
  "null"
;

InvocationArguments :
    "("
    [ Expression ("," Expression)* ]
    ")"
;

AllocationExpression :
  "new" PrimitiveType =>|| ArrayDimsAndInits
  |
  "new" ObjectType [ PossiblyEmptyTypeArguments ]
    (
      ArrayDimsAndInits
      |
      InvocationArguments [ ClassOrInterfaceBody ]
    )
;

ArrayDimsAndInits :
  SCAN 2
  ( 
    "[" =>|+1 Expression "]" 
  )+ 
  ( 
    => (Annotation)* "[" "]" 
  )*
  |
  ( 
    (Annotation)* "[" "]" 
  )+ 
  ArrayInitializer
;

Label : <IDENTIFIER><COLON> =>|| ;

Statement  :
  (Label)*
  (
    AssertStatement
    |
    Block
    |
    YieldStatement
    |
    EmptyStatement
    |
    ExpressionStatement
    |
    SwitchStatement
    |
    IfStatement
    |
    WhileStatement
    |
    DoStatement
    |
    ForStatement
    |
    BreakStatement
    |
    ContinueStatement
    |
    ReturnStatement
    |
    ThrowStatement
    |
    SynchronizedStatement
    |
    TryStatement
  )
;

INJECT AssertStatement : extends Statement;
INJECT YieldStatement : extends Statement;
INJECT EmptyStatement : extends Statement;
INJECT SwitchStatement : extends Statement
INJECT IfStatement : extends Statement
INJECT WhileStatement : extends Statement
INJECT DoStatement : extends Statement
INJECT ExpressionStatement : extends Statement
INJECT ForStatement : extends Statement
INJECT BreakStatement : extends Statement
INJECT ContinueStatement : extends Statement
INJECT ReturnStatement : extends Statement
INJECT ThrowStatement : extends Statement
INJECT SynchronizedStatement : extends Statement
INJECT TryStatement : extends Statement
INJECT TryWithResources : extends TryStatement
INJECT ClassicTryStatement : extends TryStatement

TryStatement #(false) :
   TryWithResources
   |
   ClassicTryStatement
   |
   "try" FAIL "Expecting '{' or '(' after 'try'"
;

AssertStatement : "assert" Expression [ ":" Expression ] ";" ;

Block #CodeBlock : "{" (BlockStatement)*! "}" ;

BlockStatement :
// The YieldStatement option in the Statement production will thus never
// be matched but this doesn't seem to be a problem really.
// We need YieldStatement up top here so it does not spuriously match LocalVariableDeclaration.
  YieldStatement 
  |
  => LocalVariableDeclaration ";"
  |
  ClassDeclaration
  |
  InterfaceDeclaration
  |
  Statement
;

LocalVariableDeclaration : 
  Modifiers(EnumSet.of(FINAL)) Type =>|+1 VariableDeclarator ( "," VariableDeclarator )* 
;

EmptyStatement : ";" ;

StatementExpression :
  PreIncrementExpression
  |
  PreDecrementExpression
  |
  PrimaryExpression 
  {Expression lhs = (Expression) peekNode();}
  (
      SCAN 1 {lhs.isAssignableTo()}=>
      (
          ("++" | "--") #PostfixExpression(2)
          |
          AssignmentOperator Expression #AssignmentExpression(3)
      )
      |
      SCAN 0 {lhs instanceof MethodCall || lhs instanceof AllocationExpression || lhs instanceof ConstructorInvocation}
      =>{}
      |
      FAIL "Not a valid statement"
  )
;

ExpressionStatement : StatementExpression ";" ;

SwitchStatement :
  SCAN "switch" "(" Expression ")" "{" NewSwitchLabel
  => NewSwitchStatement
  |
  ClassicSwitchStatement
;

ClassicSwitchStatement : 
  "switch" "(" Expression ")" "{"
  (ClassicCaseStatement)*
  "}"    
;

ClassicSwitchLabel :
  (
   "case" Expression ("," Expression)* 
   |
   "default" 
  )
  ":"
;

ClassicCaseStatement :
  ClassicSwitchLabel
  (SCAN 1 {getToken(1).getType() != _DEFAULT} 
          // We need this because we'll spuriously enter the BlockStatement 
          // if the next token is "default", because "default" is in the 
          // BlockStatement first set. This is really quite tricky, but maybe not my
          // fault, but the Java designers for re-using keywords!
  => BlockStatement)*
;

NewSwitchStatement :
  "switch" "(" Expression ")" "{"
  (NewCaseStatement)*
  "}"
;

NewSwitchLabel :
  (
   "case" Expression ("," Expression)* 
   |
   "default" 
  )
  "->"
;

NewCaseStatement : 
   NewSwitchLabel 
   (
     Block
     |
     ThrowStatement
     |
     SCAN 0 \.\.\SwitchExpression
     => Expression ";"
     |
     SCAN 0 ~\.\.\SwitchExpression
     => BlockStatement
   )
;

IfStatement :
  "if" "(" Expression ")" Statement [ "else" Statement ]
;

WhileStatement :
  "while" "(" Expression ")" Statement
;

DoStatement :
  "do" Statement "while" "(" Expression ")" ";"
;

ForStatement :
  "for" "("
  (
      Modifiers(EnumSet.of(FINAL)) Type <IDENTIFIER> ":" =>|| Expression 
      |
      [ ForInit ] ";" [ Expression ] ";" [ StatementExpressionList ]
  )
  ")" Statement
;

ForInit :
  LocalVariableDeclaration
  |
  StatementExpressionList
;

StatementExpressionList :
  StatementExpression ( "," StatementExpression )*
;

BreakStatement :
  "break" [ <IDENTIFIER> ] ";"
;

YieldStatement :
   SCAN {getToken(1).getImage().equals("yield") 
        && isInProduction("SwitchExpression")}# 
   => <IDENTIFIER> Expression ";" 
;

ContinueStatement : "continue" [ <IDENTIFIER> ] ";" ;

ReturnStatement : "return" (Expression)? ";" ;

ThrowStatement : "throw" Expression ";" ;

SynchronizedStatement : "synchronized" "(" Expression ")" Block ;

ClassicTryStatement :
  "try"
  =>|+1
  Block 
  (
     FinallyBlock
     |
     (
        (CatchBlock)+ 
        [FinallyBlock]
     )
  )
;

TryWithResources :
   "try" "(" =>||
    (
         => LocalVariableDeclaration
         |
         Name
    )
    (
        ";"
       [
          => LocalVariableDeclaration
          |
          Name
       ]
    )*
    ")"
    Block
    (CatchBlock)*
    [FinallyBlock]
;

CatchBlock :
    "catch"
    "("
    ["final"]
    ObjectType ("|" ObjectType)* VariableDeclaratorId
    ")"
    Block 
;

INJECT CatchBlock : extends Statement
{
    public CodeBlock getBlock() {
        return firstChildOfType(CodeBlock.class);
    }
}

FinallyBlock : "finally" Block;

INJECT FinallyBlock :
{
    public CodeBlock getBlock() {
        return firstChildOfType(CodeBlock.class);
    }
}

Annotation #Annotation :
 SCAN 2
 ( 
   NormalAnnotation
   |
   SingleMemberAnnotation
   |
   MarkerAnnotation
 )
;

NormalAnnotation #void : "@" Name "(" =>|+2 [ MemberValuePairs ] ")" ;

MarkerAnnotation #void : "@" Name ;

SingleMemberAnnotation #void :
  "@" Name "(" =>|| MemberValue ")"
;

INJECT Annotation : 
{
  public String getName() {
    return getChild(1).toString();
  }
}

MemberValuePairs :
   MemberValuePair ( "," MemberValuePair )*
;

MemberValuePair :  <IDENTIFIER> "=" MemberValue;

MemberValue :
   Annotation
   |
   MemberValueArrayInitializer
   | 
   TernaryExpression
;

MemberValueArrayInitializer :
  => "{" "}"
  |
  "{" MemberValue ( "," =>|+1 MemberValue )* [ "," ] "}"
;


AnnotationTypeDeclaration :
  Modifiers(EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, STATIC, STRICTFP))
  "@" "interface" =>|| <IDENTIFIER> AnnotationTypeBody
;

AnnotationTypeBody :
  "{" ( AnnotationTypeMemberDeclaration )* "}"
;

AnnotationMethodDeclaration :
   Modifiers(EnumSet.of(PUBLIC,ABSTRACT))
   Type <IDENTIFIER> "(" =>|| ")" [ DefaultValue ] ";"
;

AnnotationTypeMemberDeclaration :
  EmptyDeclaration 
  |
  AnnotationTypeDeclaration
  |
  ClassDeclaration
  |
  InterfaceDeclaration
  |
  EnumDeclaration
  |
  AnnotationMethodDeclaration
  |
  FieldDeclaration
;

DefaultValue : "default" MemberValue ;

LambdaExpression : 
  SCAN ~\...\NewSwitchLabel =>
  LambdaLHS =>|| (Expression | Block) 
;

LambdaLHS : (<IDENTIFIER> | SimpleLambdaLHS | FormalParameters) "->" =>|| ;

SimpleLambdaLHS #void :
   SCAN 3
   "(" <IDENTIFIER> 
   (","<IDENTIFIER>)*
   ")"
;

