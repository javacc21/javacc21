/*
 * This Python grammar corresponds to the information on the 
 * following two web pages:
 * https://docs.python.org/3/reference/grammar.html
 * https://docs.python.org/3/reference/lexical_analysis.html#indentation
 * This is Python 3.10.0, which is the latest spec at this moment.
 * (I do not anticipate supporting any older versions of the language.)
 * Currently, the generated parser can parse the source code of Django
 * and the Python standard library, with the exception of a few files
 * that are deliberately screwy.
 */

PARSER_PACKAGE = org.parsers.python;
NODE_PACKAGE = org.parsers.python.ast;
DEFAULT_LEXICAL_STATE = PYTHON;
ENSURE_FINAL_EOL;
DEACTIVATE_TOKENS=MATCH,CASE;

INCLUDE "PythonLexer.javacc" 

#Module : 
   (Statement)*! 
   <EOF> 
   {return CURRENT_NODE;}
;

Number#void : 
  <HEXNUMBER> | <BINNUMBER> | <OCTNUMBER> | <DECNUMBER> | <FLOAT> | <COMPLEX> 
;

SignedNumber : 
  ["-"]
  Number
  [("+"|"-") <COMPLEX>]
;

Strings : (<STRING_LITERAL>)+ ;

AtomicExpression#void : 
    <NAME> 
    | 
    Number 
    | 
    Strings
    | 
    "True" 
    | 
    "False" 
    | 
    "None" 
    | 
    "__peg_parser__" 
    |
    (Tuple | GenExp | Group)
    |
    (ListComp | List)
    |
    (SetComp | DictComp | Dict | Set)
    |
    "..."
;

Slice :
    [Expression] ":" =>|| [Expression] [":" [Expression]]
    |
    [=> <NAME> ":="] Expression
;

Slices : "[" Slice ("," =>|+1 Slice)* [","] "]" ;

Statement : 
   MatchStatement 
   | 
   SimpleStatement 
   | 
   CompoundStatement 
;

SimpleStatement#(>2) : SmallStatement (";" =>|+1 SmallStatement)* [";"] <NEWLINE> ; 
           
SmallStatement : 
   Assignment
   |
   StarExpressions
   |
   ReturnStatement
   |
   ImportStatement 
   |
   GlobalStatement
   |
   NonlocalStatement
   |
   "break"
   |
   "continue"
   |
   "pass"
   |
   DelStatement
   |
   AssertStatement
   |
   RaiseStatement
   |
   YieldStatement
;

CompoundStatement :
    FunctionDefinition
    |
    IfStatement
    |
    ClassDefinition
    |
    WithStatement
    |
    WhileStatement
    |
    ForStatement
    |
    TryStatement
;

ReturnStatement : "return" [StarExpressions] ;

GlobalStatement : "global" <NAME> ("," <NAME>)* ;

NonlocalStatement : "nonlocal" <NAME> ("," <NAME>)* ;

AssertStatement : "assert" Expression ("," Expression)* ;

RaiseStatement : "raise" [ Expression ["from" Expression ] ];

Block :
    SimpleStatement
    |
    <NEWLINE><INDENT>(Statement)+<DEDENT>
;    

ElseBlock : "else" ":" Block ;

ExceptBlock : "except" [ ["*"] Expression ["as" <NAME>] ] ":" Block ;

IfStatement : 
    "if" NamedExpression ":" Block 
     ("elif" NamedExpression ":" Block)* 
     ["else" ":" Block]
;     

FinallyBlock : "finally" ":" Block ;

WhileStatement : "while" NamedExpression ":" Block [ElseBlock] ;

WithStatement : 
    ["async"] "with" =>||
    (
        SCAN WithItemsInParentheses ":" => WithItemsInParentheses
        |
        WithItem ("," WithItem)* 
    )
    ":" Block
;

WithItemsInParentheses#void : "(" WithItem (SCAN 2 "," WithItem)* [","] ")" ;

WithItem : Expression ["as" StarTarget] ;

ForStatement : 
   ["async"] "for" =>|| 
   StarTargets "in" StarExpressions ":"
   Block [ElseBlock]
;

TryStatement : 
   "try" ":" Block 
   (
       FinallyBlock
       | 
       ((ExceptBlock)+ [ElseBlock] [FinallyBlock])
   )
;

DelStatement : "del" PrimaryExpression (SCAN 2 "," PrimaryExpression)* [","] ; 

NamedExpression : [ => <NAME> ":=" ] Expression ;

DottedName : <NAME> (=> "." <NAME>)* ;

ImportStatement : ImportName | ImportFrom1 | ImportFrom2 ;

ImportName#void : "import" DottedName ["as" <NAME>] ("," DottedName ["as" <NAME>])* ;

ImportFrom1#void : "from" ("." | "...")* DottedName =>|| "import"  ImportFromTargets ;

ImportFrom2#void : "from" ("." | "...")+ "import" =>|| ImportFromTargets ; 

ImportFromTargets : 
   "*"
   |
   <NAME> ["as" <NAME>] ("," <NAME> =>|| ["as" <NAME>])* [","]
   |
   "(" <NAME> ["as" <NAME>] ("," <NAME> =>|| ["as" <NAME>])* [","] ")" [","]
;

StarNamedExpression : 
     "*" BitwiseOr
     |
     NamedExpression 
;

StarExpression :
    "*" BitwiseOr
    |
    Expression
;

StarExpressions : StarExpression ("," =>|+1 StarExpression)* [","] ;

StarNamedExpressions : StarNamedExpression ("," =>|+1 StarNamedExpression)* [","] ;

BitwiseOr : BitwiseXor ("|" BitwiseXor)* ;

BitwiseXor : BitwiseAnd ("^" BitwiseAnd)* ;

BitwiseAnd : ShiftExpression ("&" ShiftExpression)* ;

ShiftExpression : AdditiveExpression (("<<" | ">>") AdditiveExpression)* ;

AdditiveExpression : MultiplicativeExpression (("+"|"-") MultiplicativeExpression)* ;

MultiplicativeExpression : UnaryExpression (("*"|"/"|"//"|"%"|"@") UnaryExpression)* ;

UnaryExpression : Power | ("+" | "-" | "~") UnaryExpression ;

Power : AwaitPrimary ["**" UnaryExpression] ;

Tuple : 
   SCAN "(" (")" | StarNamedExpression ",") =>
    "(" [StarNamedExpression "," [StarNamedExpressions]] ")" 
;

Group : "(" (YieldExpression | NamedExpression) ")" ;

AwaitPrimary : ["await"] PrimaryExpression ;

PrimaryExpression#void :
   AtomicExpression
   (
       "." <NAME> #DotName(3)
       |
       Slices #SliceExpression(2)
       |
       GenExp #GenExpression(2)
       |
       InvocationArguments #FunctionCall(2)
   )*
;

YieldExpression : 
    "yield" "from" =>|| Expression 
    |
    "yield" [StarExpressions]
;    

YieldStatement# : YieldExpression ;

AnnotatedRhs : YieldExpression | StarExpressions ;

Decorators : ("@" NamedExpression <NEWLINE>)+ ;

Annotation : ":" Expression ;

InvocationArguments : 
   "(" 
   [
      Argument(false, false)
      {
      // Variables to keep track of what we have seen,
      // and thus, what is permissible. These are 
      // defined locally so only apply when parsing, not
      // scanning ahead, so the lookahead is looser
      // than the parsing.
         boolean seenEquals = peekNode().firstChildOfType(TokenType.ASSIGN) != null;
         boolean seenDoubleStar = peekNode().firstChildOfType(TokenType.STAR_STAR) != null;
      }
      (
         SCAN 3 
         "," 
         Argument(seenEquals, seenDoubleStar)
         {
            seenEquals |= peekNode().firstChildOfType(TokenType.ASSIGN) != null;
            seenDoubleStar |= peekNode().firstChildOfType(TokenType.STAR_STAR) != null;
         }
      )*
      [","] 
   ] 
   ")" 
;

Argument(boolean seenEquals, boolean seenDoubleStar) : 
   <NAME> 
   ( 
      SCAN 1 {!seenEquals} =>
      ":=" 
      | 
      "=" 
   ) 
   =>|| 
   Expression
   |
   [
      SCAN 1 {!seenDoubleStar} => 
      ("*" | "**")
   ] 
   Expression
;

KeyValuePair : Expression ":" Expression ;

DoubleStarredKeyValuePair : 
    "**" BitwiseOr
    |
    KeyValuePair
;

DoubleStarredKeyValuePairs : DoubleStarredKeyValuePair ("," =>|+1 DoubleStarredKeyValuePair)* [","] ;

Dict :
  SCAN "{" ("}" | DoubleStarredKeyValuePair) =>
  (
    "{" 
    [DoubleStarredKeyValuePairs] 
    "}" 
  )
;

DictComp : "{" KeyValuePair =>|+2 (ForIfClause)+ "}" ;

Set : "{" StarNamedExpressions "}" ;

SetComp : "{" NamedExpression =>|+2 (ForIfClause)+ "}" ;

ClassDefinition :
    [Decorators] "class" =>||
    <NAME> [InvocationArguments] 
    ":"
    Block
;

FunctionDefinition :
    [Decorators]
    ["async"]
    "def" =>||
    <NAME>
    "("
    Parameters
    ")"
    ["->" Expression]
    ":" Block
;

LambdaDefinition : "lambda" Parameters ":" Expression ;

/*
 * Expression grammar follows
 */

Expression : Disjunction ["if" Disjunction "else" Expression] | LambdaDefinition ; 

Disjunction : Conjunction ("or" Conjunction)* ;

Conjunction : Inversion ("and" Inversion)* ;

Inversion : ("not")* Comparison ;

Comparison : BitwiseOr (ComparisonOperator BitwiseOr)* ;

ComparisonOperator#void :
   "<" | ">" | "==" | ">=" | "<=" | "!=" 
   | 
   ["not"] "in" 
   |
   "is" ["not"]
;

StarTarget : ["*"] PrimaryExpression ;

StarTargets : StarTarget ("," =>|+1 StarTarget)* [","];

ForIfClause : ["async"] "for" StarTargets "in" Disjunction ("if" Disjunction)* ;

GenExp : "(" NamedExpression =>|+2 (ForIfClause)+ ")" ;

List : "[" [StarNamedExpressions] "]" ;

ListComp : "[" NamedExpression =>|+2 (ForIfClause)+ "]" ;

StarEtc :
   KeyWords
   |
   "*" "," =>|| ParamMaybeDefault ("," =>|+1 ParamMaybeDefault)* ["," [KeyWords]]
   |
   "*" <NAME> [SCAN 1 \.\FunctionDefinition => ":" Expression] ("," =>|+1 ParamMaybeDefault)* ["," [KeyWords]]
;

ParamMaybeDefault : <NAME> [":" Expression] ["=" Expression] ;

KeyWords :
   "**" <NAME> 
   [ 
       SCAN 1 ~\...\LambdaDefinition => 
       ":" Expression
   ]
;

Parameters : 
    {boolean seenDefault = false, seenSlash=false;}
    [
      <NAME> 
// Using a contextual predicate, we manage to use the same production 
// for the parameters of a function def or a lambda. 
      [SCAN 1 \FunctionDefinition => ":" Expression] 
      ["=" Expression {seenDefault = true;}]  
      ("," =>|+1
        (
          // Slash can only occur once.
          SCAN 1 {!seenSlash} =>
          "/" {seenSlash = true;}
          | 
          <NAME> [SCAN 1 \FunctionDefinition => ":" Expression] 
          [
             // If we've already seen a param with a default value,
             // the remaining ones also have to have a default value.
             SCAN 0 {seenDefault || getToken(1).getType() == TokenType.ASSIGN}
             => "=" Expression {seenDefault = true;}
          ] 
        )
      )* 
      [ "," ]
    ]
    [
      SCAN ~(")"|":") => StarEtc
    ]
    [","]
;

AugAssign#void :
    "+=" | "-=" | "*=" | "@=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" 
    | ">>=" | "**=" | "//=" 
;

SimpleAssignTarget :
   PrimaryExpression
   |
   "(" SimpleAssignTarget ")"
;

Assignment :
 SCAN (SimpleAssignTarget (":" | AugAssign)) | (StarTargets "=") =>
 (
  SimpleAssignTarget ":" =>|| Expression ["=" AnnotatedRhs]
  |
  SimpleAssignTarget AugAssign =>|| (YieldExpression | StarExpressions)
  |
  (=>StarTargets "=")+ =>|| (YieldExpression | StarExpressions)
 )
;

// Below this point is the new pattern matching stuff
// introduced in Python 3.10

MatchStatement : 
   ACTIVATE_TOKENS MATCH ("match") 
   SubjectExpression 
   ":" 
   =>||
   <NEWLINE>
   <INDENT>
   ACTIVATE_TOKENS CASE (CaseBlock)+
   <DEDENT>
;

CaseBlock :
    "case"
    DEACTIVATE_TOKENS CASE 
    (
      Patterns
      ["if" NamedExpression]
      ":"
      Block
    )
;


Patterns :
   OpenSequencePattern
   |
   Pattern
;

StarPattern :
   "*" <NAME>
;

MaybeStarPattern#void : StarPattern | Pattern ;

ClosedPattern :
   ClassPattern 
   |
   LiteralPattern 
   |
   NameOrAttribute
   |
   =>GroupPattern
   |
   SequencePattern
   |
   MappingPattern
;

GroupPattern : "(" Pattern ")" ;

KeyValuePattern: (LiteralPattern | Attribute) ":" Pattern ;

ItemsPattern : KeyValuePattern ("," =>|+1 KeyValuePattern)* ;

MappingPattern :
  "{"
     [
         ItemsPattern ["," =>|+1 DoubleStarPattern] [","]
         |
         DoubleStarPattern [","]
     ]
  "}"
;

DoubleStarPattern : "**" <NAME> ;

LiteralPattern :
   "None" 
   | 
   "True" 
   | 
   "False"
   |
   SignedNumber
   |
   Strings
;

MaybeSequencePattern :
   MaybeStarPattern ("," =>|+1 MaybeStarPattern)* [","]
;

OpenSequencePattern :
   MaybeStarPattern "," =>|| [MaybeSequencePattern]
;

SequencePattern :
    "[" [MaybeSequencePattern] "]"
    |
    "(" [OpenSequencePattern] ")"
;    

ClassPattern :
   NameOrAttribute
   "("
   =>||
      [
          SCAN <NAME> "=" =>
          KeywordPatterns [","]
          |
          PositionalPatterns ["," =>|+1 KeywordPatterns] [","]
      ]
   ")"
;

PositionalPatterns : 
   Pattern 
   (
       // If the next three tokens are a comma, identifier, and =, we need to end this
       // production and go into KeywordPatterns. This has a bit of a kludgy feel to it.
       SCAN 0 {getToken(1).getType() == TokenType.COMMA && !( getToken(2).getType() == TokenType.NAME && getToken(3).getType() == TokenType.ASSIGN)}#
       => "," Pattern
   )* 
;

KeywordPattern : <NAME> "=" Pattern ;

KeywordPatterns : KeywordPattern ("," =>|+2 KeywordPattern)* ;

OrPattern : ClosedPattern ("|" ClosedPattern)* ;

Pattern : OrPattern ["as" <NAME>] ;

SubjectExpression : 
   StarNamedExpression "," =>|| [StarNamedExpressions]
   |
   NamedExpression
;

Attribute : <NAME> ("." <NAME>)+ ;

NameOrAttribute #Attribute(>1) : <NAME> ("." <NAME>)* ;
